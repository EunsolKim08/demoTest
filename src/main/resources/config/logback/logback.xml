<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">

	<!-- pattern  -->
	<property name="LOG_PATTERN" value="%-5level[%d{yy-MM-dd HH:mm:ss.SSS}] [%thread] [%logger:%line] - %msg%n"/> 
	
	<property name="LOG_PATH" value="./logs" />
	
	<springProfile name="local">
		<property name="ROOT_LEVEL" value="INFO" />
		<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
		<logger name="jdbc.sqlonly" level="ON"/>
	</springProfile>
	
	<springProfile name="dev">
		<property name="ROOT_LEVEL" value="INFO" />
		<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
		<logger name="jdbc.sqlonly" level="ON"/>
	</springProfile>
	
	<springProfile name="prd">
		<property name="ROOT_LEVEL" value="WARN" />
		<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
		<logger name="jdbc.sqlonly" level="OFF"/>
	</springProfile>
	
	<!-- Console Appender  -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<filter class="ch.qos.logback.core.filter.EvaluatorFilter">      
	      <evaluator>        
	        <expression>
	        	if(message.contains("GROUP BY INTRFC_SE_CODE,CNTC_STTUS_CODE")
	        	|| message.contains("com.sorincorp.bo.login.mapper.AccountMapper.selectAccount")) {
	        		return true;
	        	}
	        	return false;
			</expression>
	      </evaluator>
	      <OnMismatch>ACCEPT</OnMismatch>
	      <OnMatch>DENY</OnMatch>
	    </filter>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> 
			<pattern>${LOG_PATTERN}</pattern> 
		</encoder> 
	</appender> 
	
	<appender name="LOG_FILE" class="ch.qos.logback.classic.sift.SiftingAppender">
		<discriminator>
			<key>business</key>
			<defaultValue>undefined</defaultValue>
		</discriminator>
		<sift>
			<appender name="LOG_FILE-${business}" class="ch.qos.logback.core.rolling.RollingFileAppender">
				<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
		            <fileNamePattern>${LOG_PATH}/${business}/%d{yyyy-MM-dd}.%i.log</fileNamePattern>
		            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
		                <maxFileSize>10MB</maxFileSize>
		            </timeBasedFileNamingAndTriggeringPolicy>
		        </rollingPolicy>
		        
				<encoder>
					<charset>UTF-8</charset>
					<pattern>${LOG_PATTERN}</pattern>
				</encoder>
			</appender>
		</sift>
	</appender>

	<!-- 커넥션 open close 이벤트를 로그로 남긴다. --> 
	<logger name="jdbc.connection" level="OFF"/>
	
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. --> 
	<!-- <logger name="jdbc.sqlonly" level="OFF"/> -->
	
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. --> 
	<logger name="jdbc.sqltiming" level="OFF"/>
	
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. --> 
	<logger name="jdbc.audit" level="OFF"/>
	 
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. --> 
	<logger name="jdbc.resultset" level="OFF"/>
	
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. --> 
	<logger name="jdbc.resultsettable" level="OFF"/>
	
	<logger name="org.springframework" level="${ROOT_LEVEL}"/>
	
	<logger name="org.apache.commons.beanutils" level="${ROOT_LEVEL}"/>
	
 	<logger name="org.quartz.core" level="${ROOT_LEVEL}"/>
     
	<logger name="org.quartz.simpl" level="${ROOT_LEVEL}"/>
     
	<logger name="com.zaxxer.hikari" level="${ROOT_LEVEL}"/>
     
	<logger name="springfox.documentation" level="${ROOT_LEVEL}"/>
     
	<logger name="net.sf.ehcache" level="${ROOT_LEVEL}"/>
     
	<logger name="io.lettuce" level="${ROOT_LEVEL}"/>
	
	<logger name="org.apache" level="ERROR"/>
	
    <logger name="httpclient" level="ERROR"/>
     
	<!-- root레벨 설정  -->
	<root level="${ROOT_LEVEL}">
		<springProfile name="local">
			<appender-ref ref="CONSOLE" />
		</springProfile>
		
		<springProfile name="dev">
			<appender-ref ref="LOG_FILE"/> 
		</springProfile>		
		
		<springProfile name="prd">
			<appender-ref ref="LOG_FILE"/> 
		</springProfile>
	</root> 
	  
</configuration>
